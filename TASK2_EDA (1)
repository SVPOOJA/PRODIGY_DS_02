{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e5465d4-2922-447e-9cc0-01cea9196a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "68730137-47ad-4b72-a28a-398aa0ecd962",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('Titanic.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f19463e-60f2-4c64-bf78-ab5a4cf3a112",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6b58f473-f7f2-4f70-8d59-c64e96a4b765",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n",
       "0          False     False   False  False  False  False  False  False   False   \n",
       "1          False     False   False  False  False  False  False  False   False   \n",
       "2          False     False   False  False  False  False  False  False   False   \n",
       "3          False     False   False  False  False  False  False  False   False   \n",
       "4          False     False   False  False  False  False  False  False   False   \n",
       "..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n",
       "886        False     False   False  False  False  False  False  False   False   \n",
       "887        False     False   False  False  False  False  False  False   False   \n",
       "888        False     False   False  False  False   True  False  False   False   \n",
       "889        False     False   False  False  False  False  False  False   False   \n",
       "890        False     False   False  False  False  False  False  False   False   \n",
       "\n",
       "      Fare  Cabin  Embarked  \n",
       "0    False   True     False  \n",
       "1    False  False     False  \n",
       "2    False   True     False  \n",
       "3    False  False     False  \n",
       "4    False   True     False  \n",
       "..     ...    ...       ...  \n",
       "886  False   True     False  \n",
       "887  False  False     False  \n",
       "888  False   True     False  \n",
       "889  False  False     False  \n",
       "890  False   True     False  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "41222ce2-6050-4da7-8120-40106e7a0aee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bb9796cc-c9fd-44e3-ad37-2a884bdf3ef9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('whitegrid')\n",
    "sns.countplot(x='Survived',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a03c3111-1536-4dec-a4bc-c6659d1467a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e1599797-f8da-41dd-8bee-1339fefa3b5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7994b59a-3739-49ee-8dc7-7a75583df8d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No of Males in Titanic: 577\n"
     ]
    }
   ],
   "source": [
    "male=len(train[train['Sex']=='male'])\n",
    "print(\"No of Males in Titanic:\",male)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40840093-d1ff-4d7c-8051-239a97fba713",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No of Females in Titanic: 314\n"
     ]
    }
   ],
   "source": [
    "female=len(train[train['Sex']=='female'])\n",
    "print(\"No of Females in Titanic:\",female)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2fa57921-2501-464c-b1f1-e35b2216b503",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('whitegrid')\n",
    "sns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e3742685-02af-4136-b440-501accb81af0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjgAAAGwCAYAAACkfh/eAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAy60lEQVR4nO3de1xVZb7H8e9mI7CJGOSqqGneEBCRg2mWppTmJZ0Um9PUpJlN1kljTDsWepxMJU/SRVHUHLWxMDU1uzhNlp3GysZLOOAtGMEyzBtk2iGBjZt9/ui4Zxg0YQuszfLzfr32q/bzrLWe3wIWfF3r2WtZnE6nUwAAACbiZXQBAAAA9Y2AAwAATIeAAwAATIeAAwAATIeAAwAATIeAAwAATIeAAwAATMfb6AKMUlVVpfPnz8vLy0sWi8XocgAAQC04nU5VVVXJ29tbXl6XPk9z1Qac8+fPa9++fUaXAQAA3BAXFycfH59L9l+1AedC6ouLi5PVajW4GgAAUBsOh0P79u372bM30lUccC5clrJarQQcAACamMtNL2GSMQAAMB0CDgAAMB0CDgAAMJ2rdg4OAABNmcPhUGVlpdFl1LtmzZrVy9xYAg4AAE2I0+nUiRMndObMGaNLaTBBQUFq0aLFFd2njoADAEATciHchIeHy9/f31Q3q3U6nTp37pxOnTolSWrZsqXb2yLgAADQRDgcDle4CQkJMbqcBmGz2SRJp06dUnh4uNuXq5hkDABAE3Fhzo2/v7/BlTSsC/t3JXOMCDgAADQxZrosdTH1sX8EHAAAYDoEHAAAYDoEHAAATObWW29VVFSU6xUbG6vBgwfrj3/8Y63WffPNNxu+yAbGp6gAADChadOmaejQoZKk8+fPa8eOHZo+fbqCgoI0YsQIY4trBJzBAQDAhK699lqFhYUpLCxMLVu21MiRI9W7d2998MEHRpfWKAg4AABcJby9vdWsWTOdP39eL774ovr06aPExESlpKTo+++/r7F8aWmpUlNT1bt3b3Xt2lWDBw/W1q1bXf3vvfeeBg0apLi4OA0dOrRa36uvvqqkpCTFxcUpOTlZX3zxRaPs4wUEHKAROR0Oo0vwCHwdgMZVWVmpDz74QNu3b9dtt92mBQsWaNOmTXr22We1bt06fffdd3r66adrrJeWlqavvvpKK1eu1ObNm9WjRw9Nnz5ddrtd3333naZOnaqHH35Y77//vkaNGqXJkyfrzJkzOnjwoObNm6enn35af/7zn9WjRw9NmjRJVVVVjbbPzMEBGpHFalXxpEmqLCgwuhTDNOvYUWHz5xtdBmB6Tz/9tGbPni1JKi8vl5+fn+6//34NHz5cN954o5588kndcsstkqRnnnlGf/7zn2ts44YbbtADDzygzp07S5LGjRun9evX67vvvtP333+vyspKtWjRQq1atdK4ceMUFRUlX19fffvtt7JYLIqMjFTr1q01adIkJSUlqaqqSl5ejXNuhYADNLLKggLZDxwwugwAJpeSkqLbb79dkuTr66uwsDBZrVadPn1aZ86cUWxsrGvZjh076rHHHquxjREjRmjr1q164403dPjwYR34/99dDodD0dHR6t+/vx544AFdf/31uu222/SrX/1KNptNffr0UefOnTV8+HDFxMS4+ry9Gy92cIkKAAATCgkJUdu2bdW2bVu1aNHC9UynuoSMqVOn6rnnnlNgYKDuuecevfzyy64+i8Wil19+WevXr9egQYP08ccfa+TIkfryyy9ls9m0fv16rVq1Sj179tSbb76p5ORknTx5st7381IIOAAAXEUCAwPVvHlz5eXludq+/PJL3XLLLSovL3e1lZaWavPmzXrppZeUkpKigQMH6uzZs5J+eup3YWGhnnvuOXXr1k2PP/64/vSnP6lly5b69NNP9be//U0vv/yybrzxRqWmpur9999XRUWFsrOzG20/uUQFAMBVZvTo0VqwYIEiIiIUEhKitLQ0de/eXX5+fq5lfHx8ZLPZ9MEHHyg4OFhfffWVZs2aJUmy2+0KDAzUmjVrdO2112r48OEqKCjQt99+q5iYGPn5+SkzM1OhoaHq3bu3du/erXPnzikqKqrR9pGAAwDAVWb8+PH63//9X02aNEnnz59X//79NWPGjGrL+Pj4KD09Xc8995xee+01tW7dWv/xH/+h+fPn68svv9SwYcO0cOFCPf/881q6dKlCQkI0efJk9enTR9JPn8BavHixZs2apcjISKWnp6tDhw6Nto8Wp9PpbLTRPIjD4VBOTo66d+/uui4JNIZjw4Zd1ZOMfWJjFbl5s9FlAE1SeXm5vvrqK11//fXVzraYzc/tZ23/fjMHBwAAmA4BBwAAmA4BBwAAmA4BBwAAmA4BBwAAmA4BBwAAmA4BBwAAmA4BBwAA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6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6Xh0wPnwww8VFRVV7ZWSkiJJOnjwoH71q18pPj5eo0aN0v79+w2uFgAAeAqPDjgFBQVKSkrSZ5995nrNmTNH586d0/jx49WjRw+9+eabSkhI0MMPP6xz584ZXTIAAPAAHh1wCgsL1blzZ4WFhblegYGBeu+99+Tr66upU6eqQ4cOmj59uq655hq9//77RpcMAAA8gLfRBfycwsJC3XTTTTXac3NzlZiYKIvFIkmyWCz6t3/7N+Xk5Cg5OblOYzgcjnqp9WKsVmuDbRto6hry2GsMHN/ApTXk8V3bbXtswHE6nfrqq6/02Wef6eWXX5bD4dDgwYOVkpKi4uJidezYsdryISEhOnToUJ3H2bdvX32VXI3NZlNMTEyDbBswg/z8fJWVlRldhls4voGf5wnHt8cGnGPHjqmsrEw+Pj6aP3++jh49qjlz5qi8vNzV/s98fHxkt9vrPE5cXBz/EgMMEBUVZXQJABpIQx7fDoejVicnPDbgtGrVSjt37tQvfvELWSwWRUdHq6qqSv/5n/+pnj171ggzdrtdfn5+dR7HarUScAADcNwB5uUJx7fHBhxJCgoKqva+Q4cOqqioUFhYmEpKSqr1lZSUKDw8vBGrAwAAnspjP0X16aefqlevXtWu4X355ZcKCgpSYmKi/va3v8npdEr6ab7Onj17FB8fb1S5AADAg3hswElISJCvr6/+67/+S4cPH9a2bds0b948/fa3v9XgwYP1ww8/KC0tTQUFBUpLS1NZWZmGDBlidNkAAMADeGzACQgI0IoVK3T69GmNGjVK06dP1913363f/va3CggI0Msvv6zs7GwlJycrNzdXy5Ytk7+/v9FlAwAAD+DRc3A6deqkV1555aJ93bp106ZNmxq5IgAA0BR47BkcAAAAdxFwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBwAACA6RBw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fH19Xf/v7++vpKQkbdmyRSdPnlRoaKi6det20fGHDh2qLVu2qG3btvr+++/Vv39/SdL58+c1fPhwPfLII9WW9/b+x6/IC2eILtYHwPNwBgdAo3E4HHrllVd08ODBau0+Pj7y8/NTcHCwmjVrph9//NHVV1RUdNnt3nHHHdq2bZu2bt160bM3/7zc9u3btWXLFt16662y2WySpOuvv15HjhxR27ZtXa+PPvpI7777riSpU6dO2rdvn2s7R48e1Q8//FCnfQfQuAg4ABpNbGys+vfvr0cffVTvvvuujh49qpycHD399NOy2+26/fbbFRcXpw0bNujvf/+7du7cqZUrV152u7fccotOnTp12YATHR2t8PBwZWVlaciQIa72e++9V/v379dLL72kr7/+Wu+++65efPFFRUZGSpLuu+8+vfrqq9qyZYv+/ve/a/r06fLy4tcn4Mk4QgE0qvnz5+vOO+/UokWLNGTIED388MMqLS1VVlaWAgICNGnSJAUGBio5OVlpaWn63e9+d9lt+vj4aMCAAWrRooW6dOnys8sOHTpUVqtVt9xyi6utVatWWrp0qT799FMNGzZM8+fP11NPPaVf/vKXkqQ777xTKSkpmj17tu69917dfPPNCgwMvLIvBIAGZXH+64VlAACAJo4zOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHT+D7HvBHTv4LR8AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('whitegrid')\n",
    "sns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c9ca5a5a-25e3-40bf-a674-450512724cb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1ec9e26ed90>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train['Age'].dropna(),kde=False,color='blue',bins=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f4a4efce-a13c-4c8a-9fc1-4c085e67254c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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wgu67bbb0l1aStTW1ur888/XnDlz1NzcrDVr1mjHjh266aab0l1awvbs2aOVK1fqZz/7mWpqatTW1hbb3NCf1H1K5aKLLtLcuXPV0tKizZs3a+nSpbrrrrtc0WNZWZkqKipi24ABAzRgwABVVFRo4sSJ6ujo0KJFi9TS0qJFixYpGAxq0qRJ6S7bturqauXm5uqhhx7S3r17tXnzZi1ZskR33nmnK/r87ne/qyuvvFJz5szRZ599pi1btmjNmjW6+eabXdHfNzU3N8f9lZUkV/Q4YcIE/dmf/ZkeeughffHFF/qf//kfPfPMM7r11lszoz9jf5xrUGdnpzV79mxr7Nix1uWXX269+OKL6S7JUd/8nA7Lsqz/+7//s376059aF198sXXddddZv/nNb9JYnX2rV6+2Ro0a1etmWdnfX49Dhw5ZM2bMsMaNG2f96Ec/slatWhX7e3m39NjjgQceiH1Oh2VZVmNjo3XjjTdalZWV1k033WR9+umnaayuf/73f//XmjZtmjV27FjrRz/6kfUf//EfscfRDX12dHRY999/vzV27Fjrsssuc11/PSorK61f//rXp+13Q4/Nzc3WtGnTrHHjxllXX3219eKLL2bMY8il7QEAgBGuO70CAAAyE6EDAAAYQegAAABGEDoAAIARhA4AAGAEoQMAABhB6AAAAEYQOgAAgBGEDgAAYAShAwAAGEHoAAAARhA6AACAEf8P6VHenZdAj7gAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Age'].hist(bins=30,color='blue',alpha=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cabf006a-00db-4280-90f5-45423ba6be87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='SibSp', ylabel='count'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='SibSp',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7c93593a-7b95-4b77-b1dc-5167c7403342",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Fare'].hist(color='red',figsize=(6,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "85611575-2311-47ab-8d39-787510547436",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Fare'].hist(color='red',bins=40,figsize=(6,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "abfcf93b-0764-49d4-8b01-1f95ea359cfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Fare'].hist(color='red',bins=40,figsize=(8,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "41e00cbb-1052-40f6-97d5-d93e39dd256c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'DATA CLEANING'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"DATA CLEANING\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5fb33d84-b2d2-40bd-bb62-b0b4ed70d44d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Srinivasan\\AppData\\Local\\Temp\\ipykernel_20996\\1203772441.py:2: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.boxplot(x='Pclass',y='Age',data=train,legend=False,palette='autumn')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Pclass', ylabel='Age'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,7))\n",
    "sns.boxplot(x='Pclass',y='Age',data=train,legend=False,palette='autumn')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2fb87b2e-875f-4b5d-9d14-ef7b3d581336",
   "metadata": {},
   "outputs": [],
   "source": [
    "def impute_age(cols):\n",
    "    \n",
    "    Age = cols[0]\n",
    "    Pclass = cols[1]\n",
    "    \n",
    "    if pd.isnull(Age):\n",
    "        \n",
    "        if Pclass == 1:\n",
    "            return 37\n",
    "            \n",
    "        elif Pclass == 2:\n",
    "            return 29\n",
    "            \n",
    "        else:\n",
    "            return 24\n",
    "    else:\n",
    "        return Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "375052db-9c93-4de9-b0f0-ebcf1dade261",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f8f14aeb-5d65-417d-80a3-b65a83b128a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop('Cabin',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "396de4f0-7f72-4bea-b8bd-4dd42b77c263",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Embarked  \n",
       "0      0         A/5 21171   7.2500        S  \n",
       "1      0          PC 17599  71.2833        C  \n",
       "2      0  STON/O2. 3101282   7.9250        S  \n",
       "3      0            113803  53.1000        S  \n",
       "4      0            373450   8.0500        S  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b6edeffb-ddab-4f75-b0b4-c48a4219b6ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b54359ce-133f-4120-9c0c-c046f43e98a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 712 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  712 non-null    int64  \n",
      " 1   Survived     712 non-null    int64  \n",
      " 2   Pclass       712 non-null    int64  \n",
      " 3   Name         712 non-null    object \n",
      " 4   Sex          712 non-null    object \n",
      " 5   Age          712 non-null    float64\n",
      " 6   SibSp        712 non-null    int64  \n",
      " 7   Parch        712 non-null    int64  \n",
      " 8   Ticket       712 non-null    object \n",
      " 9   Fare         712 non-null    float64\n",
      " 10  Embarked     712 non-null    object \n",
      "dtypes: float64(2), int64(5), object(4)\n",
      "memory usage: 66.8+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f4f3e401-3daa-4320-a3e9-dc2fd025737b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Q      S\n",
       "0  False   True\n",
       "1  False  False\n",
       "2  False   True\n",
       "3  False   True\n",
       "4  False   True"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.get_dummies(train['Embarked'],drop_first=True).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c3ae1c55-e56b-4aaf-8fc5-2d5f55aad9a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "sex=pd.get_dummies(train['Sex'],drop_first=True)\n",
    "embark=pd.get_dummies(train['Embarked'],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a7428bf8-ce19-4363-a176-c4ea76e9b757",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f039c644-7ae5-4b9c-b045-5d0827c7279d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass   Age  SibSp  Parch     Fare\n",
       "0            1         0       3  22.0      1      0   7.2500\n",
       "1            2         1       1  38.0      1      0  71.2833\n",
       "2            3         1       3  26.0      0      0   7.9250\n",
       "3            4         1       1  35.0      1      0  53.1000\n",
       "4            5         0       3  35.0      0      0   8.0500"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "40717ee1-24d8-4d9b-a5ce-5453b1e812e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.concat([train,sex,embark],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "590669ef-2753-4856-993d-0b6e23e00267",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass   Age  SibSp  Parch     Fare   male      Q  \\\n",
       "0            1         0       3  22.0      1      0   7.2500   True  False   \n",
       "1            2         1       1  38.0      1      0  71.2833  False  False   \n",
       "2            3         1       3  26.0      0      0   7.9250  False  False   \n",
       "3            4         1       1  35.0      1      0  53.1000  False  False   \n",
       "4            5         0       3  35.0      0      0   8.0500   True  False   \n",
       "\n",
       "       S  \n",
       "0   True  \n",
       "1  False  \n",
       "2   True  \n",
       "3   True  \n",
       "4   True  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "88ad4b2b-1b58-44bf-bf1a-cb372efb5d17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MODEL'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"MODEL\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9b7ba046-43a1-46b3-82c0-9b7d6bb1fb67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass   Age  SibSp  Parch     Fare   male      Q      S\n",
       "0            1       3  22.0      1      0   7.2500   True  False   True\n",
       "1            2       1  38.0      1      0  71.2833  False  False  False\n",
       "2            3       3  26.0      0      0   7.9250  False  False   True\n",
       "3            4       1  35.0      1      0  53.1000  False  False   True\n",
       "4            5       3  35.0      0      0   8.0500   True  False   True"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.drop('Survived',axis=1).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e9bda961-ee78-4da7-81a4-c83bd9968805",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    1\n",
       "2    1\n",
       "3    1\n",
       "4    0\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Survived'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1e140567-0f92-4939-95d6-bc68c916f137",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1c220d4b-fd2e-4608-ba4d-e4fe155f9769",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1),\n",
    "                                                    train['Survived'],test_size=0.30,\n",
    "                                                    random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ea9f56eb-11dd-4c4b-a6de-93a158e0c557",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4ff65b15-e22b-48b3-8a4a-0381aaa4609d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-6 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-6 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-6 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-6 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-6 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(multi_class=&#x27;ovr&#x27;, n_jobs=1, penalty=&#x27;12&#x27;,\n",
       "                   solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></label><div class=\"sk-toggleable__content \"><pre>LogisticRegression(multi_class=&#x27;ovr&#x27;, n_jobs=1, penalty=&#x27;12&#x27;,\n",
       "                   solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(multi_class='ovr', n_jobs=1, penalty='12',\n",
       "                   solver='liblinear')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, \n",
    "                   intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
    "                   penalty='12', random_state=None, solver='liblinear', tol=0.0001,\n",
    "                   verbose=0, warm_start=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "390b8a3e-c758-4f03-8ca4-44f5c4dca824",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions=logmodel.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "236c56a3-70de-4447-b7af-1152ae702d4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5db7a0bd-3cbb-4f18-8c34-1cebf65b29cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy=confusion_matrix(y_test,predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "3150749d-aea2-4715-84b8-219309dd0fb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[104,  24],\n",
       "       [ 26,  60]], dtype=int64)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "93b21249-2f00-415e-b7f3-846935c3a04c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "60ead3e7-160d-47b9-960f-7d977bb3e03e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7663551401869159"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy=accuracy_score(y_test,predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2c621aa5-ce03-4ab0-9620-fa535871f7a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n",
       "       0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0,\n",
       "       1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n",
       "       1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1,\n",
       "       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], dtype=int64)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ea5cbf0-f8d2-469d-b304-94b24e48268d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
